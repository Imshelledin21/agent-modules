/*
Module: scrape-pods
Description:
  Kubernetes Pods Auto-Scraping
  -------------------------------------------------------------------------------------------------------
  !!! IMPORTANT !!!
  The annotations described below for auto-scraping of metrics should NOT be added to the both
  Service/Endpoints and to the Pods/Controller.  Metric scraping should be done at the endpoint level
  if at all possible.  The following annotations should only be added to a pod if the pod is not
  associated to a service
  !!! IMPORTANT !!!

  Each port attached to a pod container is an eligible target, oftentimes pods will have multiple ports.
  There may be instances when you want to scrape all ports or some ports and not others. To support this
  the following annotations are available:

  only scrape pods with scrape set to true, this can be single valued i.e. scrape all ports for
  the endpoint:

  metrics.agent.grafana.com/scrape: true
  prometheus.io/scrape: true

  the default scraping scheme is http, this can be specified as a single value which would override,
  the schema being used for all ports attached to the endpoint:

  metrics.agent.grafana.com/scheme: https
  prometheus.io/scheme: https

  the default path to scrape is /metrics, this can be specified as a single value which would override,
  the scrape path being used for all ports attached to the endpoint:

  metrics.agent.grafana.com/path: /metrics/some_path
  prometheus.io/path: /metrics/some_path

  the default port to scrape is the endpoint port, this can be specified as a single value which would
  override the scrape port being used for all ports attached to the endpoint, note that even if aan endpoint had
  multiple targets, the relabel_config targets are deduped before scraping:

  metrics.agent.grafana.com/port: 8080
  prometheus.io/port: 8080

  the default interval to scrape is 1m, this can be specified as a single value which would override,
  the scrape interval being used for all ports attached to the endpoint:

  metrics.agent.grafana.com/interval: 5m
  prometheus.io/interval: 5m

  the default timeout for scraping is 10s, this can be specified as a single value which would override,
  the scrape interval being used for all ports attached to the endpoint:

  metrics.agent.grafana.com/timeout: 30s
  prometheus.io/timeout: 30s
*/
argument "forward_to" {
  // comment = "Where to send the results to"
  optional = false
}

argument "tenant" {
  // comment = "The tenant to filter logs to.  This does not have to be the tenantId, this is the value to look for in the logs.agent.grafana.com/tenant annotation, and this can be a regex."
  optional = true
  default = ".*"
}

argument "clustering" {
  // comment = "Whether or not clustering should be enabled"
  optional = true
  default = false
}

argument "git_repo" {
  optional = true
  default = coalesce(env("GIT_REPO"), "https://github.com/grafana/agent-modules.git")
}

argument "git_rev" {
  optional = true
  default = coalesce(env("GIT_REV"), env("GIT_REVISION"), env("GIT_BRANCH"), "main")
}

argument "git_pull_freq" {
  optional = true
  default = "5m"
}

module.git "pod_targets" {
  repository = argument.git_repo.value
  revision = argument.git_rev.value
  pull_frequency = argument.git_pull_freq.value
  path = "modules/kubernetes/metrics/targets/pods.river"

  arguments {
    tenant = argument.tenant.value
    git_repo = argument.git_repo.value
    git_rev = argument.git_rev.value
    git_pull_freq = argument.git_pull_freq.value
  }
}

prometheus.scrape "scrape_pods" {
  targets = module.git.pod_targets.exports.relabelings.output
  forward_to = [prometheus.relabel.pods.receiver]

  clustering {
    enabled = argument.clustering.value
  }
}

prometheus.relabel "pods" {
  forward_to = argument.forward_to.value

  // set the job label, only if job is not specified or contains "module.", the value of the annotation
  // metrics.agent.grafana.com/job takes precedence
  rule {
    action = "replace"
    source_labels = ["job"]
    separator = ";"
    regex = "(?i)^(.*module\\..*|)$"
    replacement = "kubernetes-pod-scrape"
    target_label = "job"
  }

  // set the job label, only if job is "kubernetes-pod-scrape" and the label app.kubernetes.io/name exists
  // on the service, endpoint or pod, set the value to ${namespace}/${name}
  rule {
    action = "replace"
    source_labels = [
      "job",
      "__meta_kubernetes_namespace",
      "__meta_kubernetes_pod_label_app_kubernetes_io_name",
    ]
    separator = ";"
    regex = "^(?i)kubernetes-pod-scrape;([^;]+);(?:;*)?([^;]+).*$"
    replacement = "$1/$2"
    target_label = "job"
  }

  // set the instance label to the name of the pod that was scraped, there are many dashboards and rules that rely on the
  // instance label being present as it is automatically assigned to the scraped target if not set.  However, we don't
  // want to create high-cardinality unnecessairly, so it does not make sense to have it be the worker node the pod is on.
  rule {
    action = "replace"
    source_labels = ["pod"]
    regex = "(.+)"
    target_label = "instance"
  }
}
