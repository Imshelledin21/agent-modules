/*
Module: scrape-node-exporter
Description: Scrapes Node Exporter, this is a separate scrape job, if you are also using annotation based scraping, you will want to explicitly
             disable node-exporter from being scraped by this module and annotations by setting the following annotation on the node-exporter
             metrics.agent.grafana.cmo/scrape: "false".

             Node exporter should be deployed as a DaemonSet, each pod on each worker will be scraped by the agent using endpoint service discovery
*/
argument "forward_to" {
  // comment = "Where to send the results to"
  optional = false
}

argument "app_name" {
  // comment = "The name of the node exporter app"
  optional = true
  default = "prometheus-node-exporter"
}

argument "job_label" {
  optional = true
  // from Grafana Cloud Integration:
  default = "integrations/node_exporter"
  // comment = "The job label to add for all node-exporter"
}

argument "clustering" {
  // comment = "Whether or not clustering should be enabled"
  optional = true
  default = false
}

argument "git_repo" {
  optional = true
  default = coalesce(env("GIT_REPO"), "https://github.com/grafana/agent-modules.git")
}

argument "git_rev" {
  optional = true
  default = coalesce(env("GIT_REV"), env("GIT_REVISION"), env("GIT_BRANCH"), "main")
}

argument "git_pull_freq" {
  optional = true
  default = "5m"
}

// get the available endpoints
discovery.kubernetes "endpoints" {
  role = "endpoints"
}

discovery.relabel "node_exporter" {
  targets = discovery.kubernetes.endpoints.targets

  // endpoints get all of the service labels they are attached to, filter to just the node-exporter service
  rule {
    action = "keep"
    source_labels = [
      "__meta_kubernetes_service_label_app_kubernetes_io_name",
    ]
    regex = argument.app_name.value
  }

  // set the namespace
  rule {
    action = "replace"
    source_labels = ["__meta_kubernetes_namespace"]
    target_label = "namespace"
  }

  // set the service_name
  rule {
    action = "replace"
    source_labels = ["__meta_kubernetes_service_name"]
    target_label = "service"
  }

}

prometheus.scrape "node_exporter" {
  targets = discovery.relabel.kube_state_metrics.output
  forward_to = [module.git.relabelings_node_exporter.exports.metric_relabelings.receiver]
  job_name = argument.job_label.value

  clustering {
    enabled = argument.clustering.value
  }
}

// metric relabelings
module.git "relabelings_node_exporter" {
  repository = argument.git_repo.value
  revision = argument.git_rev.value
  pull_frequency = argument.git_pull_freq.value
  path = "modules/kubernetes/metrics/relabelings/node-exporter.river"

  arguments {
    forward_to = argument.forward_to.value
  }
}
