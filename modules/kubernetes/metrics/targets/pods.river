/*
Module: metrics-target-pods
Description: Performs Kubernetes service discovery for pods, applies relabelings
*/
argument "tenant" {
  // comment = "The tenant to write metrics to.  This does not have to be the tenantId, this is the value to look for in the logs.agent.grafana.com/tenant annotation, and this can be a regex."
  optional = true
  default = ".*"
}

argument "label_cluster" {
  // comment = "Static cluster label to add to all collected metrics"
  optional = true
  default = ""
}

argument "label_env" {
  // comment = "Static env label to add to all collected metrics"
  optional = true
  default = ""
}

argument "label_region" {
  // comment = "Static region label to add to all collected metrics"
  optional = true
  default = ""
}

argument "git_repo" {
  optional = true
  default = coalesce(env("GIT_REPO"), "https://github.com/grafana/agent-modules.git")
}

argument "git_rev" {
  optional = true
  default = coalesce(env("GIT_REV"), env("GIT_REVISION"), env("GIT_BRANCH"), "main")
}

argument "git_pull_freq" {
  optional = true
  default = "5m"
}

export "relabelings" {
  value = discovery.relabel.pod_labels
}

// get the available pods
discovery.kubernetes "pods" {
  role = "pod"
}

// apply metric annotation relabelings
module.git "relabelings_annotations" {
  repository = argument.git_repo.value
  revision = argument.git_rev.value
  pull_frequency = argument.git_pull_freq.value
  path = "modules/kubernetes/metrics/relabelings/annotations/metrics/pod.river"

  arguments {
    targets = discovery.kubernetes.pods.targets
  }
}

// drop any targets with __tmp_scrape = false
discovery.relabel "scrape_targets" {
  targets = module.git.relabelings_annotations.exports.relabelings.output

  // only keep targets where the pod is running or the pod_phase is empty, meaning the endpoint is not associated
  // to a pod, but rather a static IP or hostname, that could be outside of kubernetes// allow pods to declare what tenant their metrics should be written to, the following annotations are supported:
  rule {
    action = "keep"
    source_labels = ["__meta_kubernetes_pod_phase"]
    regex = "^(?i)(Running|)$"
  }

  // only keep endpoint targets that have scrape: true
  rule {
    action = "keep"
    source_labels = ["__tmp_scrape"]
    separator = ";"
    regex = "true"
  }

  // allow pods to declare what tenant their metrics should be written to, the following annotations are supported:
  //   metrics.agent.grafana.com/tenant: "primary"
  rule {
    action = "keep"
    source_labels = ["__tmp_tenant"]
    regex = "^(" + argument.tenant.value + ")$"
  }

  // allow override of http scheme, both of the following annotations are supported:
  //   prometheus.io/scheme: http
  //   metrics.agent.grafana.com/scheme: http
  rule {
    action = "replace"
    source_labels = ["__tmp_scheme"]
    target_label = "__scheme__"
  }

  // allow pods to declare what port to collect metrics from, the following annotations are supported:
  //   metrics.agent.grafana.com/port: 9090
  //   prometheus.io/port: 9090
  rule {
    action = "replace"
    source_labels = [
      "__address__",
      "__tmp_port",
    ]
    separator = ";"
    regex = "^([^:]+)(?::\\d+)?;(\\d+)$"
    replacement = "$1:$2"
    target_label = "__address__"
  }

  // allow pods to declare what path to collect metrics from, the following annotations are supported:
  //   metrics.agent.grafana.com/path: /metrics
  //   prometheus.io/path: /metrics
  rule{
    action = "replace"
    source_labels = ["__tmp_path"]
    target_label = "__metrics_path__"
  }

  // allow pods to declare how often to scrape metrics, the following annotations are supported:
  //   metrics.agent.grafana.com/interval: 5m
  //   prometheus.io/interval: 5m
  rule{
    action = "replace"
    source_labels = ["__tmp_interval"]
    target_label = "__scrape_interval__"
  }

  // allow pods to declare how long before a scrape times out, the following annotations are supported:
  //   metrics.agent.grafana.com/timeout: 30s
  //   prometheus.io/timeout: 30s
  rule{
    action = "replace"
    source_labels = ["__tmp_timeout"]
    target_label = "__scrape_timeout__"
  }
}

// apply common relabelings
module.git "relabelings_common" {
  repository = argument.git_repo.value
  revision = argument.git_rev.value
  pull_frequency = argument.git_pull_freq.value
  path = "modules/kubernetes/relabelings/common.river"

  arguments {
    targets = discovery.relabel.scrape_targets.output
    label_cluster = argument.label_cluster.value
    label_env = argument.label_env.value
    label_region = argument.label_region.value
    git_repo = argument.git_repo.value
    git_rev = argument.git_rev.value
    git_pull_freq = argument.git_pull_freq.value
  }
}

// apply common pod relabelings
module.git "relabelings_pod" {
  repository = argument.git_repo.value
  revision = argument.git_rev.value
  pull_frequency = argument.git_pull_freq.value
  path = "modules/kubernetes/relabelings/pod.river"

  arguments {
    targets = module.git.relabelings_common.exports.relabelings.output
  }
}

discovery.relabel "pod_labels" {
  targets = module.git.relabelings_pod.exports.relabelings.output
  // as this can result in duplicate scrapes of the same target because the labels are different
  // drop the container label
  rule {
    action = "labeldrop"
    regex = "container"
  }
}
