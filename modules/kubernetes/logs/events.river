/*
Module: logs-kubernetes-events
Description: Retrieves and processes kubernetes events.  This module should only be deployed as part of a StatefulSet with
             a single replica.  As events are captured from API calls, any more than a single pod would result in duplicate
              events being sent to Loki.
*/

argument "loki_url" {
  // comment = "The full URL address of Loki including the protocol, host and path i.e. https://example.com/loki/api/v1/push"
  optional = false
}

argument "loki_username" {
  // comment = "The Loki Username / Tenant ID"
  optional = false
}

argument "loki_password" {
  // comment = "The Loki Password / Token for the Tenant"
  optional = true
  default = ""
}

argument "namespaces" {
  // comment = "List of namespaces to collect events from"
  optional = true
  default = []
}

argument "label_job" {
  // comment = "The job label to set for all collected logs"
  optional = true
  default = "integrations/kubernetes/eventhandler"
}

argument "label_cluster" {
  // comment = "Static cluster label to add to all collected metrics"
  optional = true
  default = ""
}

argument "label_env" {
  // comment = "Static env label to add to all collected metrics"
  optional = true
  default = ""
}

argument "label_region" {
  // comment = "Static region label to add to all collected metrics"
  optional = true
  default = ""
}

argument "keep_labels" {
  // comment = "List of labels to keep before the log message is written to Loki"
  optional = true
  default = [
    "app",
    "cluster",
    "env",
    "instance",
    "job",
    "level",
    "log_type",
    "region",
    "squad",
    "unit",
    "team",
  ]
}

argument "git_repo" {
  optional = true
  default = coalesce(env("GIT_REPO"), "https://github.com/grafana/agent-modules.git")
}

argument "git_rev" {
  optional = true
  default = coalesce(env("GIT_REV"), env("GIT_REVISION"), env("GIT_BRANCH"), "main")
}

argument "git_pull_freq" {
  optional = true
  default = "5m"
}

loki.source.kubernetes_events "events" {
  job_name = argument.label_job.value
  namespaces = argument.namespaces.value
  forward_to = [loki.relabel.events.receiver]
}

loki.relabel "events" {
  forward_to = [module.git.log_format_logfmt.exports.process.receiver]

  // events are in logfmt format
  rule {
    action = "replace"
    replacement = "logfmt"
    target_label = "logs_agent_grafana_com_log_format"
  }

  // default to log level info as events don't always have a level
  rule {
    action = "replace"
    replacement = "Info"
    target_label = "level"
  }

}

module.git "log_format_logfmt" {
  repository = argument.git_repo.value
  revision = argument.git_rev.value
  pull_frequency = argument.git_pull_freq.value
  path = "modules/kubernetes/logs/log-formats/logfmt.river"

  arguments {
    forward_to = loki.process.events.receiver
  }
}

// set the instance label to the source host
loki.process "events" {
  forward_to = [module.git.drop_levels.exports.process.receiver]

  stage.logfmt {
    mapping = {
      "instance" = "sourcehost",
      // most events don't have a level but they do have a "type" i.e. Normal, Warning, Error, etc.
      "level" = "type",
    }
  }

  // set the instance extracted value as a label
  stage.labels {
    values = {
      instance = "",
      level = "",
    }
  }

  // if instance is not set then look for the assigned keyword as it may be part of the msg string
  // look for certain keywords and set a log level based on that
  // i.e. msg="Successfully assigned agents/blackbox-prometheus-blackbox-exporter-696d8fcd54-8qgz5 to gke-dev-default-pool-0a5344ff-0eea"
  stage.match {
    selector = "{instance=~\".*module\\.git|\"}"

    // while the level could be extracted as logfmt, this allows for multiple possible log levels formats
    // i.e. loglevel=info, level=info, lvl=info, loglvl=info
    stage.regex {
      // unescaped regex: (?:".+ assigned \w+\/(\w+|-)+ to )(?P<instance>[^ "]+)"
      expression = "(?:\".+ assigned \\w+\\/(\\w+|-)+ to )(?P<instance>[^ \"]+)\""
    }

    // set the extracted level value as a label
    stage.labels {
      values = {
        instance = "",
      }
    }
  }

  // if instance is still not set, drop the label because its value is something similar to "module.git.event_logs/loki.source.kubernetes_events.events"
  // which is not useful
  stage.match {
    selector = "{instance=~\".*module\\.git|\"}"

    stage.label_drop {
      values = ["instance"]
    }
  }
}

module.git "drop_levels" {
  repository = argument.git_repo.value
  revision = argument.git_rev.value
  pull_frequency = argument.git_pull_freq.value
  path = "modules/kubernetes/logs/drops/levels.river"

  arguments {
    forward_to = module.git.label_keep.exports.process.receiver
    git_repo = argument.git_repo.value
    git_rev = argument.git_rev.value
    git_pull_freq = argument.git_pull_freq.value
  }
}

module.git "label_keep" {
  repository = argument.git_repo.value
  revision = argument.git_rev.value
  pull_frequency = argument.git_pull_freq.value
  path = "modules/kubernetes/logs/labels/keep-labels.river"

  arguments {
    forward_to = loki.write.destination.receiver
    keep_labels = argument.keep_labels.value
  }
}

loki.write "destination" {
  endpoint {
    url = argument.loki_url.value

    basic_auth {
        username = argument.loki_username.value
        password = argument.loki_password.value
    }
  }

  external_labels = {
    "cluster" = argument.label_cluster.value,
    "env" = argument.label_env.value,
    "region" = argument.label_region.value,
  }
}
