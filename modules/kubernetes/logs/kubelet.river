/*
Module: log-kubelet
Description: Retrieves and processes the systemd journal logs for the kubelet
*/

argument "loki_url" {
  // comment = "The full URL address of Loki including the protocol, host and path i.e. https://example.com/loki/api/v1/push"
  optional = false
}

argument "loki_username" {
  // comment = "The Loki Username / Tenant ID"
  optional = false
}

argument "loki_password" {
  // comment = "The Loki Password / Token for the Tenant"
  optional = true
  default = ""
}

argument "journal_max_age" {
  // comment = "The oldest relative time from process start that will be read."
  optional = true
  default = "12h"
}

argument "journal_path" {
  // comment = "The path to the journal files"
  optional = true
  default = "/var/log/journal"
}

argument "scrub_level" {
  // comment = "Whether or not to scrub the log level from the log line"
  optional = true
  default = "false"
}

argument "scrub_timestamp" {
  // comment = "Whether or not to scrub the timestamp from the log line"
  optional = true
  default = "false"
}

argument "drop_debug" {
  // comment = "Whether or not to drop debug messages"
  optional = true
  default = "true"
}

argument "label_job" {
  // comment = "The job label to set for all collected logs"
  optional = true
  default = "loki.source.journal.kubelet"
}

argument "label_cluster" {
  // comment = "Static cluster label to add to all collected metrics"
  optional = true
  default = ""
}

argument "label_env" {
  // comment = "Static env label to add to all collected metrics"
  optional = true
  default = ""
}

argument "label_region" {
  // comment = "Static region label to add to all collected metrics"
  optional = true
  default = ""
}

argument "keep_labels" {
  // comment = "List of labels to keep before the log message is written to Loki"
  optional = true
  default = [
    "app",
    "cluster",
    "env",
    "instance",
    "job",
    "level",
    "log_type",
    "region",
    "squad",
    "systemd_unit"
    "team",
  ]
}

argument "git_repo" {
  optional = true
  default = coalesce(env("GIT_REPO"), "https://github.com/grafana/agent-modules.git")
}

argument "git_rev" {
  optional = true
  default = coalesce(env("GIT_REV"), env("GIT_REVISION"), env("GIT_BRANCH"), "main")
}

argument "git_pull_freq" {
  optional = true
  default = "5m"
}

loki.source.journal "kubelet" {
  max_age = argument.journal_max_age.value
  path = argument.journal_path.value
  forward_to = [module.git.log_format_klog.exports.process.receiver, loki.echo.testing.receiver]
  relabel_rules {
    rule {
      action = "replace"
      source_labels = ["__journal__systemd_unit"]
      target_label = "systemd_unit"
    }

    rule {
      action = "labelmap"
      regex = "__journal__(.+)"
    }
  }

  labels {
    job = argument.label_job.value
    // set the log format
    logs_agent_grafana_com_log_format = "klog",
    // set whether or not to scrub the timestamp
    logs_agent_grafana_com_scrub_timestamp = argument.scrub_timestamp.value,
    // set whether or not to scrub the log level
    logs_agent_grafana_com_scrub_level = argument.scrub_level.value,
    // set whether or not to drop debug level messages
    logs_agent_grafana_com_log_format = argument.drop_debug.value,
    // set an instance label to be the hostname
    instance = env("HOSTNAME"),
  }
}

loki.echo "testing" {}

module.git "log_format_klog" {
  repository = argument.git_repo.value
  revision = argument.git_rev.value
  pull_frequency = argument.git_pull_freq.value
  path = "modules/kubernetes/logs/log-formats/klog.river"

  arguments {
    forward_to = module.git.log_level_default.exports.process.receiver
  }
}

module.git "log_level_default" {
  repository = argument.git_repo.value
  revision = argument.git_rev.value
  pull_frequency = argument.git_pull_freq.value
  path = "modules/kubernetes/logs/labels/log-level.river"

  arguments {
    forward_to = module.git.drop_levels.exports.process.receiver
  }
}

module.git "drop_levels" {
  repository = argument.git_repo.value
  revision = argument.git_rev.value
  pull_frequency = argument.git_pull_freq.value
  path = "modules/kubernetes/logs/drops/levels.river"

  arguments {
    forward_to = module.git.label_keep.exports.process.receiver
    git_repo = argument.git_repo.value
    git_rev = argument.git_rev.value
    git_pull_freq = argument.git_pull_freq.value
  }
}

module.git "label_keep" {
  repository = argument.git_repo.value
  revision = argument.git_rev.value
  pull_frequency = argument.git_pull_freq.value
  path = "modules/kubernetes/logs/labels/keep-labels.river"

  arguments {
    forward_to = loki.write.destination.receiver
    keep_labels = argument.keep_labels.value
  }
}

loki.write "destination" {
  endpoint {
    url = argument.loki_url.value

    basic_auth {
        username = argument.loki_username.value
        password = argument.loki_password.value
    }
  }

  external_labels = {
    "cluster" = argument.label_cluster.value,
    "env" = argument.label_env.value,
    "region" = argument.label_region.value,
    "job" = argument.label_job.value,
  }
}
