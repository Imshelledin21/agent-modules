/*
Module: log-format-istio
Description: Log Processing for istio
Docs: https://istio.io/latest/docs/tasks/observability/logs/access-log/
Arguments:
  forward_to: Module to forward the output to
*/
argument "forward_to" {
  optional = false
}

export "process" {
  value = loki.process.log_format_istio
}

loki.process "log_format_istio" {
  forward_to = [argument.forward_to.value]

  // check logs.agent.grafana.com/log-format annotation, if set to istio then process the line as json
  stage.match {
    pipeline_name = "pipeline for annotation || logs.agent.grafana.com/log-format: istio"
    selector = "{logs_agent_grafana_com_log_format=~\"(?i)istio-?(json)?\"}"

    // not all istio logs contain a level, default to info
    stage.static_labels{
      values = {
        level = "info",
      }
    }

    // extract the level, response_code, method if they exist
    stage.json {
      expressions = {
        level = "level",
        response_code = "response_code",
        request_method = "method",
      }
    }

    // set the extracted level, response code and request method as labels
    stage.labels {
      values = {
        level = "",
        response_code = "",
        request_method = "",
      }
    }

    // check logs.agent.grafana.com/scrub-timestamp annotation, if true remove the timestamp from the log line
    // this can reduce the overall # of bytes sent and stored in Loki
    // remove timestamp from the log line, depending on the entry it can be "start_time" or "time"
    stage.match {
      selector = "{logs_agent_grafana_com_scrub_timestamp=\"true\"}"
      pipeline_name = "pipeline for annotation || logs.agent.grafana.com/scrub-timestamp: true"

      // remove timestamp from the log line
      // unescaped regex: ("(start_)?time":"[^"]+",)
      stage.replace {
        expression = "(\"(start_)?time\":\"[^\"]+\",)"
        replace = ""
      }
    }

    // check logs.agent.grafana.com/scrub-level annotation, if true remove the level from the log line (it is still a label)
    // this can reduce the overall # of bytes sent and stored in Loki
    stage.match {
      selector = "{logs_agent_grafana_com_scrub_level=~\"(?i)true\"}"
      pipeline_name = "pipeline for annotation || logs.agent.grafana.com/scrub-level: true"

      // remove level from the log line
      stage.replace {
        // unescaped regex: "level":"[^"]+",?
        expression = "\"level\":\"[^\"]+\",?"
        replace = ""
      }
    }

    // check logs.agent.grafana.com/embed-pod annotation, if true embed the name of the pod to the end of the log line
    // this can reduce the overall cardinality, by not using a label of "pod", individual pods can still be searched
    // using a line selector i.e. __pod=your-pod-name
    stage.match {
      selector = "{logs_agent_grafana_com_embed_pod=~\"(?i)true\"}"
      pipeline_name = "pipeline for annotation || logs.agent.grafana.com/embed-pod: true"

      // render a new label called log_line, and add the name of the pod to the end of the log message
      // knowing the pod name can be valuable for debugging, but it should not be a label in Loki due
      // to the high cardinality it would create.
      // note: .Entry is a special key that is used to reference the current line
      stage.replace {
        expression = "\\}$"
        replace = ""
      }
      stage.template {
        source = "log_line"
        template = "{{ .Entry }},\"__pod\":\"{{ .pod }}\"}"
      }

      // reset the output to the log_line
      stage.output {
        source = "log_line"
      }
    }

  }

}
