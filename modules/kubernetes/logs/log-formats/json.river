/*
Module: log-format-json
Description: Log Processing for Generic JSON
Arguments:
  forward_to: Module to forward the output to
*/
argument "forward_to" {
  optional = false
}

export "process" {
  value = loki.process.log_format_json
}

loki.process "log_format_json" {
  forward_to = [argument.forward_to.value]

  // check logs.agent.grafana.com/log-format annotation, if set to json then process the line as json
  stage.match {
    pipeline_name = "pipeline for annotation || logs.agent.grafana.com/log-format: json"
    selector = "{logs_agent_grafana_com_log_format=~\"(?i)(generic-?)?json\"}"

    // extract the level
    stage.json {
      expressions = {
        level = "level || lvl || loglevel || LogLevel || log_level || logLevel || log_lvl || logLvl || levelname || levelName || LevelName",
      }
    }

    // set the extracted level as a label
    stage.labels {
      values = {
        level = "",
      }
    }

    // check logs.agent.grafana.com/scrub-timestamp annotation, if true remove the timestamp from the log line
    // this can reduce the overall # of bytes sent and stored in Loki
    // remove timestamp from the log line, depending on the entry it can be "start_time" or "time"
    stage.match {
      selector = "{logs_agent_grafana_com_scrub_timestamp=\"true\"}"
      pipeline_name = "pipeline for annotation || logs.agent.grafana.com/scrub-timestamp: true"

      // remove timestamp from the log line
      // unescaped regex: (?i)("(timestamp|ts|logdate|time)"\s*:\s*"[^"]+",?)
      stage.replace {
        expression = "(?i)(\"(timestamp|ts|logdate|time)\"\\s*:\\s*\"[^\"]+\",?)"
        replace = ""
      }
    }

    // check logs.agent.grafana.com/scrub-level annotation, if true remove the level from the log line (it is still a label)
    // this can reduce the overall # of bytes sent and stored in Loki
    stage.match {
      selector = "{logs_agent_grafana_com_scrub_level=~\"(?i)true\"}"
      pipeline_name = "pipeline for annotation || logs.agent.grafana.com/scrub-level: true"

      // remove level from the log line
      stage.replace {
        // unescaped regex: (?i)"(log)?(level|lvl)"\s*:\s*"[^"]+",?
        expression = "(?i)\"(log)?(level|lvl)\"\\s*:\\s*\"[^\"]+\",?"
        replace = ""
      }
    }

    // check logs.agent.grafana.com/scrub-nulls annotation, if true remove any json property whose value is set to null
    // this can reduce the overall # of bytes sent and stored in Loki
    stage.match {
      selector = "{logs_agent_grafana_com_scrub_nulls=~\"(?i)true\"}"
      pipeline_name = "pipeline for annotation || logs.agent.grafana.com/scrub-null: true"

      // remove null properties
      stage.replace {
        // unescaped regex: (,("[^"]+"\s*:\s*null)|("[^"]+"\s*:\s*null),)
        expression = "(,(\"[^\"]+\"\\s*:\\s*null)|(\"[^\"]+\"\\s*:\\s*null),)"
        replace = ""
      }
    }

    // check logs.agent.grafana.com/embed-pod annotation, if true embed the name of the pod to the end of the log line
    // this can reduce the overall cardinality, by not using a label of "pod", individual pods can still be searched
    // using a line selector i.e. __pod=your-pod-name
    stage.match {
      selector = "{logs_agent_grafana_com_embed_pod=~\"(?i)true\"}"
      pipeline_name = "pipeline for annotation || logs.agent.grafana.com/embed-pod: true"

      // render a new label called log_line, and add the name of the pod to the end of the log message
      // knowing the pod name can be valuable for debugging, but it should not be a label in Loki due
      // to the high cardinality it would create.
      // note: .Entry is a special key that is used to reference the current line
      stage.replace {
        expression = "\\}$"
        replace = ""
      }
      stage.template {
        source = "log_line"
        template = "{{ .Entry }},\"__pod\":\"{{ .pod }}\"}"
      }

      // reset the output to the log_line
      stage.output {
        source = "log_line"
      }
    }

  }

}
