/*
Module: log-format-clf
Description: Log Processing for common-log (apache/nginx)
Docs: https://www.w3.org/Daemon/User/Config/Logging.html#common-logfile-format
Arguments:
  forward_to: Module to forward the output to
*/
argument "forward_to" {
  optional = false
}

export "process" {
  value = loki.process.log_format_clf
}

loki.process "log_format_clf" {
  forward_to = [argument.forward_to.value]

  // check logs.agent.grafana.com/log-format annotation, if set to clf then process the line as clf
  stage.match {
    pipeline_name = "pipeline for annotation || logs.agent.grafana.com/log-format: clf"
    selector = "{logs_agent_grafana_com_log_format=~\"(?i)(apache|nginx|common-?log|clf)\"}"

    // clf doesn't have a log level, set default to info
    stage.static_labels{
      values = {
        level = "info",
      }
    }

    // extract the http response code and request method as they might want to be used as labels
    stage.regex {
      // unescaped regex: (?P<response_code>\d{3}) "(?P<request_method>\S+)
      expression = "(?P<response_code>[0-9]{3}) \"(?P<request_method>\\S+)"
    }

    // set the extracted response code and request method as labels
    stage.labels {
      values = {
        response_code = "",
        request_method = "",
      }
    }

    // check to see if the string failed is found in the log line, if so set the level to error
    stage.match {
      selector = "{logs_agent_grafana_com_log_format=~\"(?i)(apache|nginx|common-log|clf)\"} |~ \" (failed|error) \""

      stage.static_labels {
        values = {
          level = "error",
        }
      }
    }

    // check logs.agent.grafana.com/scrub-timestamp annotation, if true remove the timestamp from the log line
    // this can reduce the overall # of bytes sent and stored in Loki
    stage.match {
      selector = "{logs_agent_grafana_com_scrub_timestamp=\"true\"}"
      pipeline_name = "pipeline for annotation || logs.agent.grafana.com/scrub-timestamp: true"

      // remove timestamp from the log line
      // unescaped regex: (\[([^\]]+)\])
      stage.replace {
        expression = "(\\[([^\\]]+)\\])"
        replace = ""
      }
    }

  }

}
