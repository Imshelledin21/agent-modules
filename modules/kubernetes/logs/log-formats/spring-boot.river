/*
Module: log-format-spring-boot
Description: Log Processing for Spring Boot
Docs: https://docs.spring.io/spring-boot/docs/2.1.13.RELEASE/reference/html/boot-features-logging.html
Arguments:
  forward_to: Module to forward the output to
*/
argument "forward_to" {
  optional = false
}

export "process" {
  value = loki.process.log_format_spring_boot
}

loki.process "log_format_spring_boot" {
  forward_to = [argument.forward_to.value]

  // check logs.agent.grafana.com/log-format annotation, if set to springboot then process the line as spring-boot
  stage.match {
    pipeline_name = "pipeline for annotation || logs.agent.grafana.com/log-format: spring-boot"
    selector = "{logs_agent_grafana_com_log_format=~\"(?i)spring-?boot\"}"

    // extract the timestamp, level, traceId, spanId, processId, thread, logger from the log line
    stage.regex {
      // unescaped regex: (?P<timestamp>[0-9]{4}-[0-9]{2}-[0-9]{2}(T|\s+)[0-9]{2}:[0-9]{2}:[0-9]{2}(\.[0-9]+)?)\s+(?P<level>\w+)\s+(?P<trace>\[(\S*\-?),(?P<traceId>\S*),(?P<spanId>\S*)\])\s+(?P<processId>[0-9]+)\s+-+\s+\[\s*(?P<thread>\S+)\]\s+(?P<logger>\S+)\s+:\s+(?P<message>.+)
      expression = "(?P<timestamp>[0-9]{4}-[0-9]{2}-[0-9]{2}(T|\\s+)[0-9]{2}:[0-9]{2}:[0-9]{2}(\\.[0-9]+)?)\\s+(?P<level>\\w+)\\s+(?P<trace>\\[(\\S*\\-?),(?P<traceId>\\S*),(?P<spanId>\\S*)\\])\\s+(?P<processId>[0-9]+)\\s+-+\\s+\\[\\s*(?P<thread>\\S+)\\]\\s+(?P<logger>\\S+)\\s+:\\s+(?P<message>.+)"
    }

    // set the extracted values as labels so they can be used by downstream components, most likely several labels
    // will be dropped before being written to Loki
    stage.labels {
      values = {
        level = "",
        trace = "",
        traceId = "",
        spanId = "",
        processId = "",
        thread = "",
        logger = "",
      }
    }

    // check logs.agent.grafana.com/scrub-timestamp annotation, if true remove the timestamp from the log line
    // this can reduce the overall # of bytes sent and stored in Loki
    // remove timestamp from the log line, depending on the entry it can be "start_time" or "time"
    stage.match {
      selector = "{logs_agent_grafana_com_scrub_timestamp=\"true\"}"
      pipeline_name = "pipeline for annotation || logs.agent.grafana.com/scrub-timestamp: true"

      // remove timestamp from the log line
      // unescaped regex: ^([0-9]{4}-[0-9]{2}-[0-9]{2}(T|\s+)[0-9]{2}:[0-9]{2}:[0-9]{2}(\.[0-9]+)?(Z|(\+|-)[0-9:]+)?)\s+
      stage.replace {
        expression = "^([0-9]{4}-[0-9]{2}-[0-9]{2}(T|\\s+)[0-9]{2}:[0-9]{2}:[0-9]{2}(\\.[0-9]+)?(Z|(\\+|-)[0-9:]+)?)\\s+"
        replace = ""
      }
    }

    // check logs.agent.grafana.com/scrub-level annotation, if true remove the level from the log line (it is still a label)
    // this can reduce the overall # of bytes sent and stored in Loki
    stage.match {
      selector = "{logs_agent_grafana_com_scrub_level=~\"(?i)true\"}"
      pipeline_name = "pipeline for annotation || logs.agent.grafana.com/scrub-level: true"

      // remove level from the log line
      stage.replace {
        // unescaped regex: (ERROR|WARN|INFO|DEBUG|TRACE)\s+
        expression = "(ERROR|WARN|INFO|DEBUG|TRACE)\\s+"
        replace = ""
      }
    }

    // check logs.agent.grafana.com/embed-pod annotation, if true embed the name of the pod to the end of the log line
    // this can reduce the overall cardinality, by not using a label of "pod", individual pods can still be searched
    // using a line selector i.e. __pod=your-pod-name
    stage.match {
      selector = "{logs_agent_grafana_com_embed_pod=~\"(?i)true\"}"
      pipeline_name = "pipeline for annotation || logs.agent.grafana.com/embed-pod: true"

      // render a new label called log_line, and add the name of the pod to the end of the log message
      // knowing the pod name can be valuable for debugging, but it should not be a label in Loki due
      // to the high cardinality it would create.
      // note: .Entry is a special key that is used to reference the current line
      stage.template {
        source = "log_line"
        template = "{{ .Entry }} __pod={{ .pod }}"
      }

      // reset the output to the log_line
      stage.output {
        source = "log_line"
      }
    }

  }

}
