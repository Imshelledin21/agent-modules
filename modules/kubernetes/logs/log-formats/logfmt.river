/*
Module: log-format-logfmt
Description: Handles formatting for log format of logfmt which is the default Golang format
Arguments:
  forward_to: Module to forward the output to
*/
argument "forward_to" {
  optional = false
}

export "process" {
  value = loki.process.log_format_logfmt
}

loki.process "log_format_logfmt" {
  forward_to = [argument.forward_to.value]

  // check logs.agent.grafana.com/log-format annotation, if set to logfmt then process the line as
  // a logfmt (https://github.com/go-logfmt/logfmt)
  stage.match {
    pipeline_name = "pipeline for annotation || logs.agent.grafana.com/log-format: logfmt"
    selector = "{logs_agent_grafana_com_log_format=~\"(?i)logfmt\"}"

    // while the level could be extracted as logfmt, this allows for multiple possible log levels formats
    // i.e. loglevel=info, level=info, lvl=info, loglvl=info
    stage.regex {
      expression = "(log)?(level|lvl)=\"?(?P<level>\\S+)\"?"
    }

    // extract the component field
    stage.logfmt {
      mapping = {
        component = "",
      }
    }

    stage.labels {
      values = {
        level = "",
        component = "",
      }
    }

    // check logs.agent.grafana.com/scrub-timestamp annotation, if true remove the timestamp from the log line
    // this can reduce the overall # of bytes sent and stored in Loki
    stage.match {
      selector = "{logs_agent_grafana_com_scrub_timestamp=\"true\"}"
      pipeline_name = "pipeline for annotation || logs.agent.grafana.com/scrub-timestamp: true"

      // remove timestamp from the log line

      // unescaped regex: ((ts?|timestamp)=\d{4}-\d{2}-\d{2}(T|\s+)\d{2}:\d{2}:\d{2}(\.\d+)?(Z|(\+|-)\d+)?\s+)
      stage.replace {
        expression = "((ts?|timestamp)=[0-9]{4}-[0-9]{2}-[0-9]{2}(T|\\s+)[0-9]{2}:[0-9]{2}:[0-9]{2}(\\.[0-9]+)?(Z|(\\+|-)[0-9]+)?\\s+)"
        replace = ""
      }
    }

    // check logs.agent.grafana.com/scrub-level annotation, if true remove the level from the log line (it is still a label)
    // this can reduce the overall # of bytes sent and stored in Loki
    stage.match {
      selector = "{logs_agent_grafana_com_scrub_level=~\"(?i)true\"}"
      pipeline_name = "pipeline for annotation || logs.agent.grafana.com/scrub-level: true"

      // remove level from the log line
      stage.replace {
        // unescaped regex: (log)?(lvl|level)="?[^\s]+\s"?
        expression = "(log)?(lvl|level)=\"?[^\\s]+\\s\"?"
        replace = ""
      }
    }

    // check logs.agent.grafana.com/embed-pod annotation, if true embed the name of the pod to the end of the log line
    // this can reduce the overall cardinality, by not using a label of "pod", individual pods can still be searched
    // using a line selector i.e. __pod=your-pod-name
    stage.match {
      selector = "{logs_agent_grafana_com_embed_pod=~\"(?i)true\"}"
      pipeline_name = "pipeline for annotation || logs.agent.grafana.com/embed-pod: true"

      // render a new label called log_line, and add the name of the pod to the end of the log message
      // knowing the pod name can be valuable for debugging, but it should not be a label in Loki due
      // to the high cardinality it would create.
      // note: .Entry is a special key that is used to reference the current line
      stage.template {
        source = "log_line"
        template = "{{ .Entry }} __pod={{ .pod }}"
      }

      // reset the output to the log_line
      stage.output {
        source = "log_line"
      }
    }

  }

}
