/*
Module: logs-from-api
Description: Performs Kubernetes service discovery for pods, applies relabelings, the discovered target logs are
             then retrieved from the kubernetes api
*/
argument "forward_to" {
  // comment = "The module to forward the output to"
  optional = false
}

argument "label_cluster" {
  // comment = "Static cluster label to add to all collected metrics"
  optional = true
  default = ""
}

argument "label_env" {
  // comment = "Static env label to add to all collected metrics"
  optional = true
  default = ""
}

argument "label_region" {
  // comment = "Static region label to add to all collected metrics"
  optional = true
  default = ""
}

argument "label_team" {
  // comment = "Static team label to add to all collected metrics"
  optional = true
  default = ""
}

argument "label_squad" {
  // comment = "Static squad label to add to all collected metrics"
  optional = true
  default = ""
}

argument "git_repo" {
  optional = true
  default = coalesce(env("GIT_REPO"), "https://github.com/grafana/agent-modules.git")
}

argument "git_rev" {
  optional = true
  default = coalesce(env("GIT_REV"), env("GIT_REVISION"), env("GIT_BRANCH"), "main")
}

argument "git_pull_freq" {
  optional = true
  default = "5m"
}

discovery.kubernetes "pods" {
  role = "pod"
}

module.git "relabelings_log" {
  repository = argument.git_repo.value
  revision = argument.git_rev.value
  pull_frequency = argument.git_pull_freq.value
  path = "modules/kubernetes/logs/relabelings.river"

  arguments {
    targets = discovery.kubernetes.pods.targets
    tenant = argument.tenant.value
    label_cluster = argument.label_cluster.value
    label_env = argument.label_env.value
    label_region = argument.label_region.value
    label_team = argument.label_team.value
    label_squad = argument.label_squad.value
    git_repo = argument.git_repo.value
    git_rev = argument.git_rev.value
    git_pull_freq = argument.git_pull_freq.value
  }
}

loki.source.kubernetes "pods" {
  targets    = module.git.relabelings_log.exports.relabelings.output
  forward_to = [argument.forward_to.value]
}
