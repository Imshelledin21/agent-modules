/*
Module: scrape-mimir-metrics
Description: Scrapes Mimir Metrics
*/
argument "forward_to" {
  // comment = "Must be a list(MetricssReceiver) where collected logs should be forwarded to"
  optional = false
}

argument "app_name" {
  // comment = "The name of the kube-state-metrics app"
  optional = true
  default = "mimir"
}

argument "port_name" {
  // comment = "The name of the port to keep metrics for"
  optional = true
  default = "http-metrics"
}

argument "namespaces" {
  // comment = "List of namespaces to search for mimir metrics in"
  optional = true
  default = ["mimir"]
}

argument "scrape_interval" {
  // comment = "How often to scrape targets"
  optional = true
  default = "60s"
}

argument "job_label" {
  // comment = "The job label to add for all mimir metrics"
  optional = true
  default = ""
}

argument "keep_metrics" {
  // comment = "Regex of metrics to keep, see ../relabelings/kube-state-metrics.river for the default value"
  optional = true
  default = "^.+$"
}

argument "clustering" {
  // comment = "Whether or not clustering should be enabled"
  optional = true
  default = false
}

argument "git_repo" {
  optional = true
  default = coalesce(env("GIT_REPO"), "https://github.com/grafana/agent-modules.git")
}

argument "git_rev" {
  optional = true
  default = coalesce(env("GIT_REV"), env("GIT_REVISION"), env("GIT_BRANCH"), "main")
}

argument "git_pull_freq" {
  optional = true
  default = "0s"
}

module.git "scrape_resource" {
  repository = argument.git_repo.value
  revision = argument.git_rev.value
  pull_frequency = argument.git_pull_freq.value
  path = "modules/meta-monitoring/metrics/scrape-resource.river"

  arguments {
    forward_to = argument.forward_to.value
    app_name = argument.app_name.value
    port_name = argument.port_name.value
    namespaces = argument.namespaces.value
    scrape_interval = argument.scrape_interval.value
    keep_metrics = argument.keep_metrics.value
    clustering = argument.clustering.value
    git_repo = argument.git_repo.value
    git_rev = argument.git_rev.value
    git_pull_freq = argument.git_pull_freq.value
  }
}
